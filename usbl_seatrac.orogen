name "usbl_seatrac"

using_library "iodrivers_base"
using_library "usbl_seatrac"

import_types_from "std"
import_types_from "base"
import_types_from "iodrivers_base"

using_task_library "iodrivers_base"

# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the usbl_seatrac namespace.
task_context "Task" , subclasses: "iodrivers_base::Task" do
    needs_configuration

    # A configuration property (here, a std::string). Its value can be retrieved
    # in the C++ code with # _config_value.get() and _config_value.set(new_value).
    
    # The device port used to communicate with componet
#    property "device_port", "usbl_seatrac/DevicePort", "PORT_USB"

#    property "baud_rate", "uint8_t"

    # An input port, i.e. an object from which the component gets data from
    # other components' outputs
    #
    # Data can be retrieved using _input.read(value), which returns true if data
    # was available, and false otherwise. _input.connected() returns if this
    # input is connected to an output or not.
    input_port("input", "iodrivers_base/RawPacket")

    # An output port, i.e. an object to which the component pushes data so that
    # it is transmitted to other components' inputs
    #
    # Data can be written using _output.write(value). _output.connected() returns
    # if this output is connected to an input or not.
    output_port("output", "iodrivers_base/RawPacket")
  #  output_port("pose_samples", "base/samples/RigidBodyState")

    port_driven "input"
    fd_driven
end

